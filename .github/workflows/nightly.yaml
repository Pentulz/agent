name: Rust Nightly Release

# Trigger once a day at 02:00 UTC
# on:
#   schedule:
#     - cron: "0 2 * * *"
#   workflow_dispatch: # allows manual triggering
on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux-x86
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - build: windows
            target: x86_64-pc-windows-msvc
            os: windows-latest
          - build: arm64
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install ARM toolchain
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binaries
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{matrix.target}}-agent${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_files/

      - name: Generate nightly tag
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "RELEASE_TAG=nightly-$TIMESTAMP" >> $GITHUB_ENV

      - name: Publish Nightly Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: true
          files: release_files/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
