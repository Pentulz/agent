name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  code_quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features
      # Check code formatting
      - name: Check formatting
        run: cargo fmt --all --check

  build_upload:
    # runs-on: ubuntu-latest
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux-x86
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc

    outputs:
      release_built: ${{ steps.set-output.outputs.release_built }}
    steps:
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binaries for "${{ matrix.target }}"
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/agent

  build_arm:
    runs-on: ubuntu-latest
    steps:
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Install cross toolchain
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build for ARM64
        run: cargo build --release --target aarch64-unknown-linux-gnu

      - name: Upload ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-aarch64
          path: target/aarch64-unknown-linux-gnu/release/agent
